[tox]
envlist =
    lint
    {py39,py311}-test
    combine-test-reports
isolated_build = True


[testenv:lint]
description = Run static checkers.
basepython = py39
extras = lint
passenv = CODEMETER_HOST
commands =
    # Check import ordering
    isort . --check
    # Check formatting
    black . --check
    # Check type hinting
    mypy .
    # Lint source code
    pylint . {posargs}
    # Check docstring formatting
    pydocstyle .
    # Check that function argument names are consistent between function signatures and docstrings
    pylint --load-plugins pylint.extensions.docparams src {posargs}


[testenv:{py39,py311}-test]
description = Run doc tests and unit tests.
package = wheel
extras = test
setenv =
    PY_IGNORE_IMPORTMISMATCH=1
    COVERAGE_FILE = reports{/}.coverage.{envname}
passenv = CODEMETER_HOST
commands =
    # Run tests and doctests from .py files
    pytest --junitxml=reports/pytest.xml.{envname} {posargs}


[testenv:combine-test-reports]
description = Combine test and coverage data from multiple test runs.
skip_install = true
setenv =
    COVERAGE_FILE = reports/.coverage
depends = {py39,py311}-test
deps =
    junitparser
    coverage[toml]
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage html
    coverage xml


[testenv:docs]
description = Test and build the docs.
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/build
extras = doc
passenv = CODEMETER_HOST
commands =
    # Remove build directory
    python -c 'import shutil; shutil.rmtree("{env:BUILDDIR}", ignore_errors=True);'
    # Delete all files generated by sphinx-apidoc
    python -c 'import glob, os; [os.remove(f) for f in glob.glob("docs/{{ cookiecutter.import_name }}*")];'
    # Create dummy files to prevent warnings
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("{{ cookiecutter.import_name }}.rst").write_text("");'
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("license_compliance.rst").write_text("");'
    # Run doctests (only from .rst files in docs folder, doctests in .py files are covered by pytest)
    sphinx-build -b doctest -W -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/doctest" {posargs}
    # Autogenerate docs from code
    sphinx-apidoc -f --no-toc -o docs/ src/{{ cookiecutter.import_name }}
    # Dump OSS license information into the docs directory
    python {env:DOCSDIR}/_scripts/generate_license_information.py
    # Build the docs
    sphinx-build -b html -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/html" {posargs}


[testenv:build]
description = Build the package.
extras = build
passenv = CODEMETER_HOST
commands =
    # Clean up build directories
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    # Build the package
    python -m build .
